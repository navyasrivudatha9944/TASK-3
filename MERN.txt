// Update task by ID
app.put("/update/:id", async (req, res) -> (
const {id} req.params;
const (text) = req.body;
const updatedTask await Task.findByIdAndUpdate(id, { text ), { new: true });
res.send(updatedTask);
});
// Delete task by ID
app.delete("/delete/:id", async (req, res) => {
const [id) req.params;
await Task.findByIdAndDelete(id);
res.send({message: "Task deleted successfully"));
});
Frontend -Taskitem Component (React)
function Taskltem(( task, onDelete, onUpdate )) (
const [isEditing, setIsEditing) useState(false);
const [newText, setNewText] useState(task.text);
return (
<li>
(isEditing? (
<>
<input value-(newText) onChange-(()-> setNewText(e.target.value)) />
<button onClick()> (onUpdate (task._id, newText); setisEditing(false); })}>
Save
</button>
</>
(task.text)
<button onClick()> setisEditing(true)}>Edit</button>
<button onClick(() => onDelete(task._id)}>Delete</button>
</>
</11>
Frontend - App.js Integration (React)
const updateTask (id, newText) => {
axios.put('http://localhost:5000/update/$(id)", (text: newText })
.then(res => {
setTasks (tasks.map(t => t._id = id? res.data: t));
});
};
const deleteTask (id) -> (
axios.delete("http://localhost:5000/delete/$(id)")
.then(() => setTasks (tasks.filter(t => t._id !== id)));
};